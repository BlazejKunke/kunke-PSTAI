---
export interface Props {
  lang: 'en' | 'pl';
}
const { lang } = Astro.props;

const content = {
  pl: {
    title: 'Dołącz do PSTAI',
    description: 'Gotowy, aby być częścią wiodącej polskiej społeczności szkolenia AI? Wypełnij poniższy formularz, a wkrótce się z Tobą skontaktujemy.',
    form: {
      name_label: 'Imię i nazwisko *',
      email_label: 'Email *',
      role_label: 'Rola',
      role_options: [
        { value: '', text: 'Wybierz swoją rolę', description: '' },
        { value: 'trainer', text: 'Trener AI', description: 'Dla profesjonalistów prowadzących szkolenia z zakresu AI.' },
        { value: 'educator', text: 'Edukator', description: 'Dla nauczycieli, wykładowców i twórców materiałów edukacyjnych.' },
        { value: 'consultant', text: 'Konsultant', description: 'Dla doradców pomagających firmom wdrażać rozwiązania AI.' },
        { value: 'researcher', text: 'Badacz', description: 'Dla naukowców i studentów prowadzących badania w dziedzinie AI.' },
        { value: 'student', text: 'Student', description: 'Dla osób uczących się i stawiających pierwsze kroki w AI.' },
        { value: 'other', text: 'Inne', description: 'Dla entuzjastów i wszystkich innych zainteresowanych tematyką AI.' },
      ],
      message_label: 'Wiadomość (opcjonalnie)',
      message_placeholder: 'Opowiedz nam o swoim doświadczeniu lub zainteresowaniach...',
      consent_label: 'Wyrażam zgodę na kontakt ze strony PSTAI w sprawie członkostwa i związanych z nim działań. *',
      submit_button: 'Wyślij zgłoszenie',
      loading_button: 'Wysyłanie...',
    },
    messages: {
      success: 'Dziękujemy! Wkrótce się z Tobą skontaktujemy.',
      error: 'Coś poszło nie tak. Spróbuj ponownie lub skontaktuj się z nami bezpośrednio.',
      name_required: 'Imię i nazwisko są wymagane',
      email_required: 'Email jest wymagany',
      email_invalid: 'Proszę wprowadzić prawidłowy adres email',
      consent_required: 'Musisz wyrazić zgodę na kontakt',
    }
  },
  en: {
    title: 'Join PSTAI',
    description: 'Ready to be a part of Poland\'s leading AI training community? Fill out the form below, and we\'ll be in touch soon.',
    form: {
      name_label: 'Full Name *',
      email_label: 'Email *',
      role_label: 'Role',
      role_options: [
        { value: '', text: 'Select your role', description: '' },
        { value: 'trainer', text: 'AI Trainer', description: 'For professionals conducting AI training.' },
        { value: 'educator', text: 'Educator', description: 'For teachers, lecturers, and creators of educational materials.' },
        { value: 'consultant', text: 'Consultant', description: 'For advisors helping companies implement AI solutions.' },
        { value: 'researcher', text: 'Researcher', description: 'For scientists and students conducting research in the field of AI.' },
        { value: 'student', text: 'Student', description: 'For learners and those taking their first steps in AI.' },
        { value: 'other', text: 'Other', description: 'For enthusiasts and anyone else interested in AI.' },
      ],
      message_label: 'Message (optional)',
      message_placeholder: 'Tell us about your experience or interests...',
      consent_label: 'I consent to be contacted by PSTAI regarding membership and related activities. *',
      submit_button: 'Send Application',
      loading_button: 'Sending...',
    },
    messages: {
      success: 'Thank you! We will contact you shortly.',
      error: 'Something went wrong. Please try again or contact us directly.',
      name_required: 'Full name is required',
      email_required: 'Email is required',
      email_invalid: 'Please enter a valid email address',
      consent_required: 'You must consent to be contacted',
    }
  }
};

const t = content[lang];
---

<section id="join" class="py-20 lg:py-24">
  <div class="container mx-auto px-4">
    <div class="max-w-2xl mx-auto text-center">
      <h2 class="text-3xl lg:text-4xl font-bold text-text mb-8">{t.title}</h2>
      
      <p class="text-lg text-gray-700 mb-12">
        {t.description}
      </p>
      
      <form 
        id="join-form" 
        class="space-y-6 text-left"
        novalidate
        data-messages={JSON.stringify(t.messages)}
      >
        <div style="position: absolute; left: -5000px;">
          <input type="text" name="honeypot" tabindex="-1" autocomplete="off">
        </div>
        
        <div>
          <label for="join-name" class="block text-sm font-medium text-text mb-2">
            {t.form.name_label}
          </label>
          <input 
            type="text" 
            id="join-name" 
            name="name" 
            required 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
            aria-describedby="join-name-error"
          >
          <div id="join-name-error" class="text-red-600 text-sm mt-1 hidden" role="alert"></div>
        </div>
        
        <div>
          <label for="join-email" class="block text-sm font-medium text-text mb-2">
            {t.form.email_label}
          </label>
          <input 
            type="email" 
            id="join-email" 
            name="email" 
            required 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
            aria-describedby="join-email-error"
          >
          <div id="join-email-error" class="text-red-600 text-sm mt-1 hidden" role="alert"></div>
        </div>
        
        <div>
          <label for="join-role" class="block text-sm font-medium text-text mb-2">
            {t.form.role_label}
          </label>
          <select 
            id="join-role" 
            name="role" 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
          >
            {t.form.role_options.map(option => <option value={option.value} data-description={option.description}>{option.text}</option>)}
          </select>
          <div id="role-description" class="text-sm text-gray-500 mt-2 min-h-[20px]"></div>
        </div>
        
        <div>
          <label for="join-message" class="block text-sm font-medium text-text mb-2">
            {t.form.message_label}
          </label>
          <textarea 
            id="join-message" 
            name="message" 
            rows="4" 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
            placeholder={t.form.message_placeholder}
          ></textarea>
        </div>
        
        <div>
          <label class="flex items-start space-x-3">
            <input 
              type="checkbox" 
              id="join-consent" 
              name="consent" 
              required 
              class="mt-1 h-4 w-4 text-primary border-gray-300 rounded focus:ring-2 focus:ring-primary"
              aria-describedby="join-consent-error"
            >
            <span class="text-sm text-gray-700">
              {t.form.consent_label}
            </span>
          </label>
          <div id="join-consent-error" class="text-red-600 text-sm mt-1 hidden" role="alert"></div>
        </div>
        
        <button 
          type="submit" 
          class="w-full bg-primary text-white py-4 px-6 rounded-lg font-semibold text-lg hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="join-submit-text">{t.form.submit_button}</span>
          <span id="join-loading" class="hidden">{t.form.loading_button}</span>
        </button>
        
        <div id="join-status" class="text-center text-sm hidden" role="status" aria-live="polite"></div>
      </form>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('join-form') as HTMLFormElement;
    if (!form) return;

    const messages = JSON.parse(form.dataset.messages || '{}');
    const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const submitText = document.getElementById('join-submit-text') as HTMLElement;
    const loading = document.getElementById('join-loading') as HTMLElement;
    const status = document.getElementById('join-status') as HTMLElement;
    
    // Role description handler
    const roleSelect = document.getElementById('join-role') as HTMLSelectElement;
    const roleDescription = document.getElementById('role-description') as HTMLElement;
    if (roleSelect && roleDescription) {
      roleSelect.addEventListener('change', (e) => {
        const select = e.target as HTMLSelectElement;
        const selectedOption = select.options[select.selectedIndex];
        const description = selectedOption.dataset.description;
        roleDescription.textContent = description || '';
      });
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      clearErrors();
      
      if (!validateForm()) {
        return;
      }
      
      const formData = new FormData(form);
      
      if (formData.get('honeypot')) {
        return;
      }
      
      submitBtn.disabled = true;
      submitText.classList.add('hidden');
      loading.classList.remove('hidden');
      status.classList.add('hidden');
      
      try {
        const response = await fetch(import.meta.env.FORM_ACTION_JOIN || '/api/join', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          status.textContent = messages.success;
          status.className = 'text-center text-sm text-green-600 bg-green-50 p-4 rounded-lg';
          status.classList.remove('hidden');
          form.reset();
          if (roleDescription) roleDescription.textContent = '';
        } else {
          throw new Error('Submission failed');
        }
      } catch (error) {
        status.textContent = messages.error;
        status.className = 'text-center text-sm text-red-600 bg-red-50 p-4 rounded-lg';
        status.classList.remove('hidden');
      } finally {
        submitBtn.disabled = false;
        submitText.classList.remove('hidden');
        loading.classList.add('hidden');
      }
    });
    
    function validateForm(): boolean {
      let isValid = true;
      
      const name = form.querySelector('#join-name') as HTMLInputElement;
      const email = form.querySelector('#join-email') as HTMLInputElement;
      const consent = form.querySelector('#join-consent') as HTMLInputElement;
      
      if (!name.value.trim()) {
        showError('join-name-error', messages.name_required);
        isValid = false;
      }
      
      if (!email.value.trim()) {
        showError('join-email-error', messages.email_required);
        isValid = false;
      } else if (!isValidEmail(email.value)) {
        showError('join-email-error', messages.email_invalid);
        isValid = false;
      }
      
      if (!consent.checked) {
        showError('join-consent-error', messages.consent_required);
        isValid = false;
      }
      
      return isValid;
    }
    
    function showError(errorId: string, message: string): void {
      const errorEl = document.getElementById(errorId) as HTMLElement;
      errorEl.textContent = message;
      errorEl.classList.remove('hidden');
    }
    
    function clearErrors(): void {
      const errors = form.querySelectorAll('[id$="-error"]');
      errors.forEach(error => {
        error.classList.add('hidden');
        error.textContent = '';
      });
    }
    
    function isValidEmail(email: string): boolean {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }
  });
</script>